<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://taivasjumala.github.io/</id>
    <title>Taivas Jumala</title>
    <updated>2021-05-02T09:58:01.159Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://taivasjumala.github.io/"/>
    <link rel="self" href="https://taivasjumala.github.io/atom.xml"/>
    <logo>https://taivasjumala.github.io/images/avatar.png</logo>
    <icon>https://taivasjumala.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Taivas Jumala</rights>
    <entry>
        <title type="html"><![CDATA[What Are You Talking About-数据结构-字典树（Trie）]]></title>
        <id>https://taivasjumala.github.io/post/what-are-you-talking-about/</id>
        <link href="https://taivasjumala.github.io/post/what-are-you-talking-about/">
        </link>
        <updated>2021-04-01T07:33:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="what-are-you-talking-about">What Are You Talking About</h1>
<blockquote>
<p>来自 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1075">HDU OJ, 1075</a></p>
<blockquote>
<p>登陆账号提交代码</p>
</blockquote>
<p><em><strong>Time Limit: 10000/5000 MS (Java/Others)  Memory Limit: 102400/204800 K (Java/Others)</strong></em></p>
</blockquote>
<h2 id="problem-description">Problem Description</h2>
<p>Ignatius<a href="#reference-anchor-1"><sup>1</sup></a> is so lucky that he met a Martian yesterday. But he didn't know the language the Martians use. The Martian gives him a history book of  Mars and a dictionary when it leaves. Now Ignatius want to translate the history book into English. Can you help him?</p>
<blockquote>
<p><strong>问题描述：</strong></p>
<p>伊格那修是如此幸运啊，他昨天遇见了一个火星人！但是他并不理解火星人使用的语言。这位火星人离开时留下一本火星人的历史书和一本字典。现在伊格那修想要把这那本历史书翻译成英文。你能帮帮他吗？<a href="#reference-anchor-2"><sup>2</sup></a></p>
</blockquote>
<h2 id="input">Input</h2>
<p>The problem has only one test case, the test case consists of two parts, the dictionary part and the book part. The dictionary part starts with a single line contains a string &quot;START&quot;, this string should be ignored,  then some lines follow, each line contains two strings, the first one is a word in English, the second one is the corresponding word in  Martian's language. A line with a single string &quot;END&quot; indicates the end  of the directory part, and this string should be ignored. The book part  starts with a single line contains a string &quot;START&quot;, this string should  be ignored, then an article written in Martian's language. You should  translate the article into English with the dictionary. If you find the  word in the dictionary you should translate it and write the new word  into your translation, if you can't find the word in the dictionary you  do not have to translate it, and just copy the old word to your  translation. Space(' '), tab('\t'), enter('\n') and all the punctuation  should not be translated. A line with a single string &quot;END&quot; indicates  the end of the book part, and that's also the end of the input. All the  words are in the lowercase, and each word will contain at most 10  characters, and each line will contain at most 3000 characters.</p>
<blockquote>
<p><strong>输入：</strong></p>
<p>这个问题只有一个测试用例，这个测试用例由两部分组成——字典部分和历史书的部分。字典部分以包含一个字符串 &quot;START&quot; 的单行开始，这个字符串应该要被忽略，然后紧跟着几行，每行包括两个字符串，第一个字符串是一个英语单词，第二个字符串是一个与其相对应的火星语单词。而单个字符串 &quot;END&quot;  表示字典部分结束，并且这个字符串应该要被忽略。书本部分以一个包括字符串 ”START“ 的单行开始，这个字符串同样需要被忽略，然后是一篇以火星语写成的文章。你要用字典部分把这篇文章翻译成英文。如果你在字典中找到了对应的单词你应该要把它翻译并写入你的译文中，如果你不能找到就不必翻译，只需把原词抄录到你的译文中。空格(' '), 制表符('\t'), 换行符('\n') 和所有的标点符号都不要翻译。一个字符串 ”END“ 表示书本部分的结束，同时这也是输入部分的结束。所有的单词都是小写，并且每个单词最多包括 10 个字符， 并且每行最多包含 3000 个字符。</p>
</blockquote>
<h2 id="output">Output</h2>
<p>In this problem, you have to output the translation of the history book.</p>
<blockquote>
<p><strong>输出：</strong></p>
<p>在这个问题中，你需要输出这本历史书的译文。</p>
</blockquote>
<h2 id="sample-input">Sample Input</h2>
<pre><code>START
from fiwo
hello difh
mars riwosf
earth fnnvk
like fiiwj
END
STAR
difh, i'm fiwo riwosf.
i fiiwj fnnvk!
END

</code></pre>
<h2 id="sample-output">Sample Output</h2>
<pre><code>hello, i'm from mars.
i like earth!

</code></pre>
<blockquote>
<h3 id="hint">Hint</h3>
<p>Huge input, scanf is recommended.</p>
<blockquote>
<p><strong>提示：</strong></p>
<p>庞大输入，建议使用输入函数 scanf() 。</p>
</blockquote>
</blockquote>
<h2 id="author">Author</h2>
<p>Ignatius. L</p>
<hr>
<h3 id="解法一">解法一</h3>
<p>​		考虑到一个英文单词对应一个火星文单词，使用 C++ STL 中的 map 可以较为简单的完成此题。</p>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;
using namespace std;

int main()
{
    map&lt;string, string&gt; dictionary;

    scanf(&quot;START\n&quot;);
    //吸收包括字符串 ”START“ 的单行

    string English, Martian;
    while (cin &gt;&gt; English &amp;&amp; English != &quot;END&quot;)
    {
        cin &gt;&gt; Martian;
        dictionary[Martian] = English;
    }
    //建立一个以火星文为 key 英文为 value 的 map

    cin.ignore();          //忽略“END”后的回车符
    getline(cin, English); //吸收“START/n”

    string line;         //获取整行
    string history_book; //保存译文
    string temporary;    //暂存单词

    while (getline(cin, line) &amp;&amp; line != &quot;END&quot;) //读取整行
    {
        for (auto i = line.begin(); i != line.end(); ++i)
        { //遍历一整行
            if ((*i) &lt;= 'z' &amp;&amp; (*i) &gt;= 'a')
            { //该字符是一个单词的部分就加到temporary
                temporary += (*i);
            }
            else
            {//该字符不是单词的一部分，说明 temporary 中已经保存了完整的单词，下面先对 temporary 中保存的单词来处理

                if (dictionary.find(temporary) != dictionary.end()) //在字典中查找对应的key，判断字典中是否有对应单词
                { //在字典中找到了对应的单词把它翻译并写入你的译文中
                    history_book += dictionary[temporary];
                }
                else
                { //不能找到就不必翻译，只需把原词抄录到译文中
                    history_book += temporary;
                }

                temporary = &quot;&quot;; //置空temporary

                history_book += (*i); //空格(' '), 制表符('\t'), 换行符('\n') 和所有的标点符号都不要翻译。
            }
        }
        history_book += &quot;\n&quot;; //getline()函数遇到换行符停止，因此这里为每行补回一个'\n'
    }

    cout &lt;&lt; history_book;
    //输出译文

    return 0;
}
</code></pre>
<hr>
<h3 id="解法二">解法二</h3>
<p>​		这里可以用一个字典树（Tried树）来保存英文单词，字典树中用边代表单词中的字母。</p>
<p>​		在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/taivas-jumala/image-host/raw/master/img/Rd4e8a6f8e6ff74adf366c58cc19a5553" alt="字典树" loading="lazy"></figure>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

class TaivasjumalaTrie
{
private:
    struct TaivasjumalaTrieNode//字典树的节点
    {
        string English;//保存单词
        TaivasjumalaTrieNode *next[26];//字典树的边（分支），这里只有小写字母，因此有 26 个边（分支）；
        TaivasjumalaTrieNode()//节点初始化
        {
            English = &quot;&quot;;
            for (int i = 0; i &lt; 26; ++i)
            {
                next[i] = nullptr;
            }
        }
    };
    TaivasjumalaTrieNode root; //根节点
public:
    TaivasjumalaTrie();//构造函数
    TaivasjumalaTrie(string &amp;martian, string &amp;english);
    void Add(string &amp;martian, string &amp;english);//插入
    void Delete(string &amp;martian);//删除
    bool Search(string &amp;martian,string&amp;read);//查找
};


TaivasjumalaTrie::TaivasjumalaTrie()
{
}

TaivasjumalaTrie::TaivasjumalaTrie(string &amp;martian, string &amp;english)
{
    TaivasjumalaTrieNode *p = &amp;root;
    int index;
    for (auto i = martian.begin(); i != martian.end(); ++i)
    {
        index = (*i) - 'a';
        p-&gt;next[index] = new TaivasjumalaTrieNode();
        p = p-&gt;next[index];
    }
    p-&gt;English = english;
}

void TaivasjumalaTrie::Add(string &amp;martian, string &amp;english)
{
    TaivasjumalaTrieNode *p=&amp;root;//保存当前节点位置，从根节点开始遍历
    int index;//保存下标
    for(auto i=martian.begin();i!=martian.end();++i)
    {
        index = (*i) - 'a';
        if(p-&gt;next[index]!=nullptr)
        {//不为空指针，顺分支查找
            p=p-&gt;next[index];
        }
        else
        {//为空指针，说明到达节点尾部，开辟空间保存字母
            p-&gt;next[index]=new TaivasjumalaTrieNode();
            p=p-&gt;next[index];
        }
    }
    p-&gt;English=english;//末尾保存单词
}

bool TaivasjumalaTrie::Search(string &amp;martian,string&amp;read) //用 read 保存查找到的对应英文，返回是否查找
{
    TaivasjumalaTrieNode *p=&amp;root;
    int index;
    for(auto i=martian.begin();i!=martian.end();++i)
    {
        index=(*i)-'a';
        if(p-&gt;next[index]==nullptr)
        {
            return false;
        }
        p=p-&gt;next[index];
    }
    if(p-&gt;English==&quot;&quot;)
    {//因为单词可能有相同的前缀，例如 like 和 likely，但是可能 like 并不在该字典中，这里做个判别
        return false;
    }
    else
    {
        read=p-&gt;English;
    }
    return true;
}

int main()
{
    scanf(&quot;START\n&quot;);
    //吸收包括字符串 ”START“ 的单行

    TaivasjumalaTrie dictionary;
    string English, Martian;
    while (cin &gt;&gt; English &amp;&amp; English != &quot;END&quot;)
    {
        cin &gt;&gt; Martian;
        dictionary.Add(Martian,English);
    }
    //构建字典树

    cin.ignore();          //忽略“END”后的回车符
    getline(cin, English); //吸收“START/n”

    string line;         //获取整行
    string history_book; //保存译文
    string temporary;    //暂存单词
    string read;         //用于获取树中单词

    while (getline(cin, line) &amp;&amp; line != &quot;END&quot;) //读取整行
    {
        for (auto i = line.begin(); i != line.end(); ++i)
        { //遍历一整行
            if ((*i) &lt;= 'z' &amp;&amp; (*i) &gt;= 'a')
            { //该字符是一个单词的部分就加到temporary
                temporary += (*i);
            }
            else
            {//该字符不是单词的一部分，说明 temporary 中已经保存了完整的单词，下面先对 temporary 中保存的单词来处理
                if (dictionary.Search(temporary,read)) 
                { //在字典树中找到了对应的单词把它翻译并写入你的译文中
                    history_book += read;
                }
                else
                { //不能找到就不必翻译，只需把原词抄录到译文中
                    history_book += temporary;
                }

                temporary = &quot;&quot;; //置空temporary

                history_book += (*i); //空格(' '), 制表符('\t'), 换行符('\n') 和所有的标点符号都不要翻译。
            }
        }
        history_book += &quot;\n&quot;; //getline()函数遇到换行符停止，因此这里为每行补回一个'\n'
    }

    cout &lt;&lt; history_book;
    //输出译文
    return 0;
}
</code></pre>
<p>关于我的代码有两点需要提一下：</p>
<ol>
<li>这里为了水题，在这个 Trie 类中缺少析构函数，主要是因为我偷懒，如果需要写的话要用递归方法 delete 掉 new 出来的空间。</li>
<li>Trie 类主要用到增、查，一般不用删除，这个类没有这个方法，我又偷懒了。</li>
</ol>
<h3 id="算法分析">算法分析</h3>
<p>​		C++ STL中的 map 和 字典树在效率方面区别主要体现在查找。</p>
<p>​		在时间方面对于 map 由于查找的时候用的是红黑树实现，在 n 个条目的字典中效率为 O(log n) ，若字符串长度为 m 则还要算上比较的时间，总的复杂度为 O(m×log n)。而对对于 Trie，查找的时间只与字符串长度有关因此只需 O(m)，就可以完成。<a href="#reference-anchor-3"><sup>3</sup></a></p>
<p>但是 Trie 事实上是一中空间换时间的做法，为了保存一个字符往往需要含 26 个指针的节点来保存，但是如果有相同前缀的字符串较多，存储密度就会高的多。</p>
<p>在这题中的提交结果也展示出了符合预期的结果。</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据结构\效率</th>
<th style="text-align:center">时间</th>
<th style="text-align:center">空间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">C++ STL map</td>
<td style="text-align:center">1996 MS</td>
<td style="text-align:center">73608 K</td>
</tr>
<tr>
<td style="text-align:center">Trie</td>
<td style="text-align:center">1575 MS</td>
<td style="text-align:center">128736 K</td>
</tr>
</tbody>
</table>
<div id="reference-anchor-1"> 
<p>-[1]  这道题的作者为 Ignatius. L 个人猜测昵称灵感来自 San Ignacio de Loyola （1491年－1556年7月31日，西班牙人，耶稣会创始人，罗马公教圣人之一。他在罗马公教会内进行改革，以对抗由马丁·路德等人所领导的宗教改革。</p>
<div id="reference-anchor-2">
<p>-[2] <a href="https://jikipedia.com/definition/552155949">&quot;那你能帮帮我吗？&quot;</a></p>
<div id="reference-anchor-3">
<p>-[3] 需要注意其他 C++ 内置数据类型和字符串在查找效率方面的区别。</p>
<blockquote>
<p><code>std::map</code> and <code>std::set</code> are implemented by compiler vendors using highly balanced binary search trees (e.g. red-black tree, AVL tree).</p>
<p>As correctly pointed out by David, <code>find</code> would take O(log n) time, where n is the number of elements in the container.</p>
<p>But that's with primitive data types like <code>int</code>, <code>long</code>, <code>char</code>, <code>double</code> etc., not with strings.</p>
<p>If <code>std:string</code>, lets say of size 'm', is used as key, traversing the height of the balanced binary search tree will require log n <em>comparisons</em> of the given key with an entry of the tree.</p>
<p>When <code>std::string</code> is the key of the <code>std::map</code> or <code>std::set</code>, <code>find</code> and <code>insert</code> operations will cost O(m log n), where m is the length of given string that needs to be found.</p>
</blockquote>
<p>来自 stack-overflow 论坛 <a href="https://stackoverflow.com/questions/9961742/time-complexity-of-find-in-stdmap">Time complexity of find() in std::map?</a> , answered Jul 10 '13 at 2:24 by <a href="https://stackoverflow.com/users/2138713/arif-ali-saiyed">Arif Ali Saiyed</a></p>
<p>这里还了解到下次可以试一试 <code>std::unordered_map</code> （ 查找的平均时间复杂度为O(1) ）来做这一道题。</p>
]]></content>
    </entry>
</feed>